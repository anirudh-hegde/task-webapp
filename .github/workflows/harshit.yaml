name: harshit

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Bootstrap & Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            echo "=== 1) Ensure prerequisites on EC2 ==="
            command -v python3 >/dev/null || sudo yum install -y python3
            command -v pip3   >/dev/null || sudo yum install -y python3-pip
            command -v node   >/dev/null || \
              curl -sL https://rpm.nodesource.com/setup_18.x | sudo bash - && \
              sudo yum install -y nodejs
            command -v pm2    >/dev/null || sudo npm install -g pm2
            command -v opentelemetry-bootstrap >/dev/null || \
              pip3 install opentelemetry-distro && \
              opentelemetry-bootstrap --action=install
            command -v serve  >/dev/null || sudo npm install -g serve

            echo "=== 2) Pull latest code ==="
            cd ~/task-webapp
            if [ ! -d .git ]; then
              git clone https://github.com/${{ github.repository }} .
            else
              git fetch --all
              git reset --hard origin/main
            fi

            echo "=== 3) Deploy Backend (Flask + OTel) ==="
            cd backend/Flask-ToDo-List
            pip3 install --upgrade pip
            pip3 install -r requirements.txt

            pm2 stop flask-app || true
            OTEL_RESOURCE_ATTRIBUTES="service.name=flask-app-backend" \
            OTEL_EXPORTER_OTLP_ENDPOINT="https://ingest.in.signoz.cloud:443" \
            OTEL_EXPORTER_OTLP_HEADERS="signoz-access-token=${{ secrets.SIGNOZ_TOKEN }}" \
            OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED="true" \
              pm2 start opentelemetry-instrument -- \
                python3 app.py --host=0.0.0.0 --port=5000 \
                --name flask-app

            echo "=== 4) Deploy Frontend (React) ==="
            cd ../../frontend/Simple-Todos-In-React-JS
            npm ci
            echo "REACT_APP_API_URL=http://${{ secrets.EC2_HOST }}:5000" > .env
            npm run build

            pm2 stop react-app || true
            pm2 start serve -- -s build -l 3000 --name react-app

            echo "=== 5) Persist & Report ==="
            pm2 save
            pm2 list
