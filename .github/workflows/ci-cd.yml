# name: CI - Test and Run Services

# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

# permissions:
#   contents: read
  
  
# jobs:
#   test-and-run:
#     runs-on: self-hosted
#     # Using your self-hosted runner
#     env:
#       PUBLIC_IP: 54.123.45.67 
#       FRONTEND_APP_API_URL: http://43.204.145.165:3000
#       BACKEND_APP_API_URL: http://43.204.145.165:5000
#   # Environment variables for OpenTelemetry/SigNoz Cloud
#   # These will be available to all steps in the job.
#       OTEL_RESOURCE_ATTRIBUTES: service.name=flask-app-backend-ci
#       OTEL_EXPORTER_OTLP_ENDPOINT: https://ingest.in.signoz.cloud:443
#       OTEL_EXPORTER_OTLP_HEADERS: "signoz-access-token=e9bfcba0-a5a1-4d45-b2d5-38d332625ac8"
#       OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED: true
      
#       # Environment variable for the React App to find the backend
#       # This works because both servers will run on localhost on the self-hosted runner
       

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
        
#       # =========================================================
#       # Backend Setup
#       # =========================================================
#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.10' # Ensure this version is installed on your runner

#       - name: Install backend dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r backend/Flask-ToDo-List/requirements.txt
#           opentelemetry-bootstrap --action=install # For auto-instrumentation

#       # =========================================================
#       # Frontend Setup
#       # =========================================================
#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '18' # Ensure Node v18+ is available on your runner

#       - name: Install frontend dependencies
#         working-directory: frontend/Simple-Todos-In-React-JS
#         run: npm install

#       - name: Make run scripts executable
#         run: |
#           chmod +x backend/Flask-ToDo-List/backend-run.sh
#           chmod +x frontend/Simple-Todos-In-React-JS/frontend-run.sh
#       # =========================================================
#       # Run Services in the Background
#       # =========================================================
#       - name: Run Backend Service in Background
#         working-directory: backend/Flask-ToDo-List
#         run: ./backend-run.sh &

#       - name: Run Frontend Service in Background
#         working-directory: frontend/Simple-Todos-In-React-JS
#         run: ./frontend-run.sh &
#       # - name: Run Backend in Background
#       #   working-directory: backend/Flask-ToDo-List
#       #   # The '&' runs the command in the background
#       #   run: opentelemetry-instrument python3 app.py &

#       # - name: Run Frontend in Background
#       #   working-directory: frontend/Simple-Todos-In-React-JS
#       #   # The '&' runs the command in the background
#       #   run: npm start &

#       # =========================================================
#       # Health Check / Integration Test
#       # =========================================================
#       - name: Wait for services to start
#         # Give the servers time to initialize before testing them
#         run: sleep 40

#       - name: Test Backend Endpoint
#         # --fail causes the step to fail if the HTTP status is an error (e.g., 404, 500)
#         run: curl --fail http://localhost:5000/api/todos

#       - name: Test Frontend Endpoint
#         run: curl --fail http://localhost:3000

name: CD-deploy - new

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Run Deployment Script on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            set -e

            echo "=== 1) Detecting OS and Installing Prerequisites ==="
            sudo apt-get update -y

            # Install Python3, pip3, curl if missing
            command -v python3 >/dev/null || sudo apt-get install -y python3
            command -v pip3 >/dev/null || sudo apt-get install -y python3-pip
            command -v curl >/dev/null || sudo apt-get install -y curl

            # Install Node.js via NodeSource if not installed
            if ! command -v node >/dev/null; then
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi

            # Install pm2 if not installed
            command -v pm2 >/dev/null || sudo npm install -g pm2

            # Install serve for static frontend hosting
            command -v serve >/dev/null || sudo npm install -g serve

            echo "=== 2) Clone or Update Project ==="
            cd ~/task-webapp || { mkdir -p ~/task-webapp && cd ~/task-webapp; }

            if [ ! -d .git ]; then
              git clone https://github.com/${{ github.repository }} .
            else
              git fetch --all
              git reset --hard origin/main
            fi

            echo "=== 3) Deploy Backend (Flask + OTEL) ==="
            cd backend/Flask-ToDo-List

            # Setup virtual environment
            python3 -m venv venv
            source venv/bin/activate

            # Upgrade pip & install Python deps inside venv using --break-system-packages
            pip install --upgrade pip --break-system-packages
            pip install -r requirements.txt --break-system-packages

            # Ensure OpenTelemetry is available
            if ! command -v opentelemetry-bootstrap >/dev/null; then
              pip install opentelemetry-distro --break-system-packages
              opentelemetry-bootstrap --action=install
            fi

            # Restart backend using pm2 with OTEL env
            pm2 stop flask-app || true
            OTEL_RESOURCE_ATTRIBUTES="service.name=flask-app-backend" \
            OTEL_EXPORTER_OTLP_ENDPOINT="https://ingest.in.signoz.cloud:443" \
            OTEL_EXPORTER_OTLP_HEADERS="signoz-access-token=${{ secrets.SIGNOZ_TOKEN }}" \
            OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED="true" \
              pm2 start opentelemetry-instrument -- \
                python3 app.py --host=0.0.0.0 --port=5000 \
                --name flask-app

            echo "=== 4) Deploy Frontend (React) ==="
            cd ../../frontend/Simple-Todos-In-React-JS

            npm ci

            echo "REACT_APP_API_URL=http://${{ secrets.EC2_HOST }}:5000" > .env

            npm run build

            pm2 stop react-app || true
            pm2 start serve -- -s build -l 3000 --name react-app

            echo "=== 5) Persist PM2 & Report ==="
            pm2 save
            pm2 list
          EOF
