name: CI - Test and Run Services

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

  
env:
  # Environment variables for OpenTelemetry/SigNoz Cloud
  # These will be available to all steps in the job.
  OTEL_RESOURCE_ATTRIBUTES: service.name=flask-app-backend-ci
  OTEL_EXPORTER_OTLP_ENDPOINT: https://ingest.in.signoz.cloud:443
  OTEL_EXPORTER_OTLP_HEADERS: "signoz-access-token=e9bfcba0-a5a1-4d45-b2d5-38d332625ac8"
  OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED: true
  
  # Environment variable for the React App to find the backend
  # This works because both servers will run on localhost on the self-hosted runner
  REACT_APP_API_URL: http://localhost:5000

jobs:
  test-and-run:
    runs-on: self-hosted
    # Using your self-hosted runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # =========================================================
      # Backend Setup
      # =========================================================
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Ensure this version is installed on your runner

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/Flask-ToDo-List/requirements.txt
          opentelemetry-bootstrap --action=install # For auto-instrumentation

      # =========================================================
      # Frontend Setup
      # =========================================================
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Ensure Node v18+ is available on your runner

      - name: Install frontend dependencies
        working-directory: frontend/Simple-Todos-In-React-JS
        run: npm install

      # =========================================================
      # Run Services in the Background
      # =========================================================
      - name: Run Backend in Background
        working-directory: backend/Flask-ToDo-List
        # The '&' runs the command in the background
        run: opentelemetry-instrument python3 app.py &

      - name: Run Frontend in Background
        working-directory: frontend/Simple-Todos-In-React-JS
        # The '&' runs the command in the background
        run: npm start &

      # =========================================================
      # Health Check / Integration Test
      # =========================================================
      - name: Wait for services to start
        # Give the servers time to initialize before testing them
        run: sleep 40

      - name: Test Backend Endpoint
        # --fail causes the step to fail if the HTTP status is an error (e.g., 404, 500)
        run: curl --fail http://localhost:5000/api/todos

      - name: Test Frontend Endpoint
        run: curl --fail http://localhost:3000

      # =========================================================
      # Cleanup Step
      # =========================================================
      # - name: Stop Servers
      #   # This step will run even if the previous steps failed
      #   if: always()
      #   run: |
      #     echo "Cleaning up background processes..."
      #     # Find and kill the processes to prevent them from staying alive on your runner
      #     pkill -f "opentelemetry-instrument" || echo "Backend was not running."
      #     pkill -f "react-scripts start" || echo "Frontend was not running."
# name: Local CI/CD Pipeline

# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

# permissions:
#   contents: write

# # env:
# #   REACT_APP_API_URL: http://localhost:5000
# #   OTEL_RESOURCE_ATTRIBUTES: service.name=flask-app-backend
# #   OTEL_EXPORTER_OTLP_ENDPOINT: https://ingest.in.signoz.cloud:443
# #   OTEL_EXPORTER_OTLP_HEADERS: signoz-access-token=e9bfcba0-a5a1-4d45-b2d5-38d332625ac8
# #   OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED: true 
#   # OTEL_SERVICE_NAME: flask-todo-instrumented

# jobs:
#   lint-build-local:
#     runs-on: Self-hosted

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       # Backend Lint and setup
#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.10'

#       - name: Install backend dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r backend/Flask-ToDo-List/requirements.txt
#           pip install flake8

#       - name: Lint backend
#         run: flake8 backend/Flask-ToDo-List/app

#       # Frontend Lint and setup
#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '18'

#       - name: Install frontend dependencies
#         working-directory: frontend/Simple-Todos-In-React-JS
#         run: npm ci

#       - name: Lint frontend
#         working-directory: frontend/Simple-Todos-In-React-JS
#         run: npx eslint src

#       # === Backend Instrumentation ===
#       # - name: Build backend image (without push)
#       #   run: docker build -t flask-todo-temp backend/Flask-ToDo-List

#       # - name: Auto-instrument backend container
#       #   run: |
#       #     mkdir -p otel-temp/backend
#       #     docker run --rm \
#       #       -v $(pwd)/otel-temp/backend:/instrumented \
#       #       flask-todo-temp bash -c "\
#       #         pip install opentelemetry-distro opentelemetry-instrumentation-flask && \
#       #         cp -r /app/* /instrumented && \
#       #         echo '' >> /instrumented/app/app.py && \
#       #         echo 'from opentelemetry.instrumentation.flask import FlaskInstrumentor' >> /instrumented/app/app.py && \
#       #         echo 'FlaskInstrumentor().instrument_app(app)' >> /instrumented/app/app.py \
#       #       "

#       # #Frontend Instrumentation
#       # - name: Prepare frontend instrumented folder
#       #   run: mkdir -p otel-temp/frontend

#       # - name: Copy frontend source to otel-temp/frontend
#       #   run: cp -r frontend/Simple-Todos-In-React-JS/* otel-temp/frontend/

#       # - name: Inject OpenTelemetry in frontend (example)
#       #   run: |
#       #     echo "import './otel-setup';" >> otel-temp/frontend/src/index.js
#       #     # Add your otel-setup.js injection here or ensure it exists in otel-temp/frontend/src/

#       # #Upload full instrumented repo 
#       # - name: Upload instrumented code
#       #   uses: actions/upload-artifact@v4
#       #   with:
#       #     name: instrumented-full-repo
#       #     path: otel-temp

#       # #Rebuild backend image from instrumented code
#       # - name: Rebuild instrumented backend image
#       #   run: docker build -t flask-todo-instrumented:latest otel-temp/backend

#       # #Build frontend image from instrumented code
#       # - name: Build frontend image
#       #   run: docker build --build-arg REACT_APP_API_URL=${{ env.REACT_APP_API_URL }} -t react-todo-frontend:latest otel-temp/frontend

#       # #Run containers locally
#       # - name: Run containers locally
#       #   run: |
#       #     docker network create todo-net || true
#       #     docker run -d --name backend --network todo-net -p 5000:5000 flask-todo-instrumented:latest
#       #     docker run -d --name frontend --network todo-net -p 3000:3000 react-todo-frontend:latest
          
#       # - name: Push otel-temp to GitHub repository root
#       #   run: |
#       #     git config --global user.name "github-actions[bot]"
#       #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
#       #     git fetch origin
#       #     git checkout main
          
#       #     rm -rf otel-temp/frontend/node_modules
          
#       #     git add otel-temp
#       #     git commit -m "Add instrumented repo to otel-temp" || echo "No changes to commit"
#       #     git push origin main
