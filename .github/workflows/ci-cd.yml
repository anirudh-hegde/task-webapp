name: Local CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  
env:
  REACT_APP_API_URL: http://localhost:5000

jobs:
  lint-build-local:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Backend Lint and setup...
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/Flask-ToDo-List/requirements.txt
          pip install flake8

      - name: Lint backend
        run: flake8 backend/Flask-ToDo-List/app

      # Frontend Lint and setup...
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install frontend dependencies
        working-directory: frontend/Simple-Todos-In-React-JS
        run: npm ci

      - name: Lint frontend
        working-directory: frontend/Simple-Todos-In-React-JS
        run: npx eslint src

      # === Backend Instrumentation ===
      - name: Build backend image (without push)
        run: docker build -t flask-todo-temp backend/Flask-ToDo-List

      - name: Auto-instrument backend container
        run: |
          mkdir -p otel-temp/backend
          docker run --rm \
            -v $(pwd)/otel-temp/backend:/instrumented \
            flask-todo-temp bash -c "\
              pip install opentelemetry-distro opentelemetry-instrumentation-flask && \
              cp -r /app/* /instrumented && \
              echo '' >> /instrumented/app/app.py && \
              echo 'from opentelemetry.instrumentation.flask import FlaskInstrumentor' >> /instrumented/app/app.py && \
              echo 'FlaskInstrumentor().instrument_app(app)' >> /instrumented/app/app.py \
            "

      # === Frontend Instrumentation ===
      - name: Prepare frontend instrumented folder
        run: mkdir -p otel-temp/frontend

      - name: Copy frontend source to otel-temp/frontend
        run: cp -r frontend/Simple-Todos-In-React-JS/* otel-temp/frontend/

      - name: Inject OpenTelemetry in frontend (example)
        run: |
          echo "import './otel-setup';" >> otel-temp/frontend/src/index.js
          # Add your otel-setup.js injection here or ensure it exists in otel-temp/frontend/src/

      # === Upload full instrumented repo ===
      - name: Upload instrumented code
        uses: actions/upload-artifact@v4
        with:
          name: instrumented-full-repo
          path: otel-temp

      # === Rebuild backend image from instrumented code ===
      - name: Rebuild instrumented backend image
        run: docker build -t flask-todo-instrumented:latest otel-temp/backend

      # === Build frontend image from instrumented code ===
      - name: Build frontend image
        run: docker build --build-arg REACT_APP_API_URL=${{ env.REACT_APP_API_URL }} -t react-todo-frontend:latest otel-temp/frontend

      # === Run containers locally ===
      - name: Run containers locally
        run: |
          docker network create todo-net || true
          docker run -d --name backend --network todo-net -p 5000:5000 flask-todo-instrumented:latest
          docker run -d --name frontend --network todo-net -p 3000:3000 react-todo-frontend:latest
          
      - name: Push otel-temp to GitHub repository root
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin
          git checkout main
          cp -r otel-temp ./otel-temp
          git add otel-temp
          git commit -m "Add instrumented repo to otel-temp" || echo "No changes to commit"
          git push origin main

# name: Local CI/CD Pipeline

# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

# env:
#   REACT_APP_API_URL: http://localhost:5000

# jobs:
#   lint-build-local:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       # Backend Lint
#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.10'

#       - name: Install backend dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r backend/Flask-ToDo-List/requirements.txt
#           pip install flake8

#       - name: Lint backend
#         run: |
#           flake8 backend/Flask-ToDo-List/app

#       # Frontend Lint
#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '18'

#       - name: Install frontend dependencies
#         working-directory: frontend/Simple-Todos-In-React-JS
#         run: npm ci

#       - name: Lint frontend
#         working-directory: frontend/Simple-Todos-In-React-JS
#         run: npx eslint src

#       # === BACKEND Auto-Instrumentation ===
#       - name: Build backend image (without push)
#         run: |
#           docker build -t flask-todo-temp backend/Flask-ToDo-List

#       - name: Auto-instrument backend container
#         run: |
#           mkdir -p otel-temp/backend
#           docker run --rm \
#             -v $(pwd)/otel-temp/backend:/instrumented \
#             flask-todo-temp bash -c "\
#               pip install opentelemetry-distro opentelemetry-instrumentation-flask && \
#               cp -r /app/. /instrumented/ && \
#               echo '' >> /instrumented/app/app.py && \
#               echo 'from opentelemetry.instrumentation.flask import FlaskInstrumentor' >> /instrumented/app/app.py && \
#               echo 'FlaskInstrumentor().instrument_app(app)' >> /instrumented/app/app.py \
#             "

#       - name: Prepare instrumented frontend code
#         run: |
#           mkdir -p otel-temp/frontend
#           cp -r frontend/Simple-Todos-In-React-JS/* otel-temp/frontend/
      
#       - name: Upload instrumented code
#         uses: actions/upload-artifact@v4
#         with:
#           name: instrumented-whole-code
#           path: otel-temp

#       - name: Rebuild instrumented backend image
#         run: |
#           docker build -t flask-todo-instrumented:latest otel-temp/backend

#       - name: Build frontend image
#         run: |
#           docker build --build-arg REACT_APP_API_URL=${{ env.REACT_APP_API_URL }} -t react-todo-frontend:latest otel-temp/frontend

#       - name: Run containers locally
#         run: |
#           docker network create todo-net || true
#           docker run -d --name backend --network todo-net -p 5000:5000 flask-todo-instrumented:latest
#           docker run -d --name frontend --network todo-net -p 3000:3000 react-todo-frontend:latest

# ------------------------------------------END----------------------------------------------

      # - name: Rebuild instrumented backend image
      #   run: |
      #     docker build -t flask-todo-instrumented:latest otel-temp

      # === FRONTEND Auto-Instrumentation ===
      # - name: Inject OpenTelemetry for React (no exporter configured)
      #   working-directory: frontend/Simple-Todos-In-React-JS
      #   run: |
      #     npm install --save @opentelemetry/api @opentelemetry/sdk-trace-web \
      #       @opentelemetry/instrumentation-fetch \
      #       @opentelemetry/instrumentation-document-load

          # cat << 'EOF' >> src/otel-setup.js
          # import { WebTracerProvider } from '@opentelemetry/sdk-trace-web';
          # import { ConsoleSpanExporter, SimpleSpanProcessor } from '@opentelemetry/sdk-trace-base';
          # import { FetchInstrumentation } from '@opentelemetry/instrumentation-fetch';
          # import { DocumentLoadInstrumentation } from '@opentelemetry/instrumentation-document-load';

          # const provider = new WebTracerProvider();
          # provider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));
          # provider.register();
          # new FetchInstrumentation().enable();
          # new DocumentLoadInstrumentation().enable();
          # EOF

          # echo "import './otel-setup';" >> src/index.js

      # - name: Build frontend image
      #   run: |
      #     docker build --build-arg REACT_APP_API_URL=${{ env.REACT_APP_API_URL }} -t react-todo-frontend:latest frontend/Simple-Todos-In-React-JS

      # - name: Run containers locally
      #   run: |
      #     docker network create todo-net || true
      #     docker run -d --name backend --network todo-net -p 5000:5000 flask-todo-instrumented:latest
      #     docker run -d --name frontend --network todo-net -p 3000:3000 react-todo-frontend:latest

# name: Local CI/CD Pipeline

# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

# env:
#   REACT_APP_API_URL: http://localhost:5000

# jobs:
#   lint-build-local:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       # Backend Lint
#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.10'

#       - name: Install backend dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r backend/Flask-ToDo-List/requirements.txt
#           pip install flake8

#       - name: Lint backend
#         run: |
#           flake8 backend/Flask-ToDo-List/app

#       # Frontend Lint
#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '18'

#       - name: Install frontend dependencies
#         working-directory: frontend/Simple-Todos-In-React-JS
#         run: npm ci

#       - name: Lint frontend
#         working-directory: frontend/Simple-Todos-In-React-JS
#         run: npx eslint src

#       # Build and Auto-Instrument Backend
#       - name: Build backend image (without push)
#         run: |
#           docker build -t flask-todo-temp backend/Flask-ToDo-List

#       - name: Auto-instrument backend container
#         run: |
#           mkdir -p otel-temp
#           docker run --rm \
#             -v $(pwd)/otel-temp:/instrumented \
#             flask-todo-temp bash -c "\
#               pip install opentelemetry-distro opentelemetry-instrumentation-flask && \
#               cp -r /app/* /instrumented && \
#               echo '' >> /instrumented/app/app.py && \
#               echo 'from opentelemetry.instrumentation.flask import FlaskInstrumentor' >> /instrumented/app/app.py && \
#               echo 'FlaskInstrumentor().instrument_app(app)' >> /instrumented/app/app.py && \
#               echo 'Auto-instrumented backend code copied' \
#             "
#       - name: Upload instrumented backend code
#         uses: actions/upload-artifact@v4
#         with:
#           name: instrumented-backend
#           path: otel-temp

#       - name: Rebuild instrumented backend image
#         run: |
#           docker build -t flask-todo-instrumented:latest otel-temp

#       # Build Frontend
#       - name: Build frontend image
#         run: |
#           docker build --build-arg REACT_APP_API_URL=${{ env.REACT_APP_API_URL }} -t react-todo-frontend:latest frontend/Simple-Todos-In-React-JS

#       # Run both containers locally (optional)
#       - name: Run containers locally
#         run: |
#           docker network create todo-net || true
#           docker run -d --name backend --network todo-net -p 5000:5000 flask-todo-instrumented:latest
#           docker run -d --name frontend --network todo-net -p 3000:3000 react-todo-frontend:latest
